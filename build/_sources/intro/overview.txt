.. _intro-overview:

===================
Bir bakışta Django
===================

Django hızlı tempolu bir haber merkezi ortamında geliştirildiğinden, temel web 
geliştirme görevlerini hızlı ve kolay bir şekilde yapmak için tasarlanmıştı.
Bu kısımda Django ile veritabanı-idareli web uygulamaları yazmanın genel görünümü
verilmiştir.

Bu belgenin amacı size Django'nun nasıl çalıştığı hakkında yeterli teknik spesifikleri
vermektir. Belge bir referans veya eğitsel olmak amacında değildir -- fakat bunlara da 
sahibiz! Bir projeye yaratmaya hazır olduğunuz zaman :ref:`eğitsele başlayın <intro-tutorial01>`
ya da :ref:`daha ayrıntılı belgelendirmeye dalın!<topics-index>`.


Modelinizi tasarlayın
======================

Django'yu bir veritabanı olmadan da kullanabilmenize rağmen, Django, Python kodu yazarak 
veritabanınızın yerleşimini tanımlayacağınız bir nesne-ilişkisel eşleyici ile birlikte gelir.

The :ref:`veri-model söz dizimi<topics-db-models>` size modellerinizi tanımlamak için zengin yollar sunar.
Şimdilik iki yıllık süre boyunca karşılaşılmış veritabanı-şema problemlerini çözüyor. İşte hızlı bir örnek::

    class Yazar(models.Model):
        tam_adi = models.CharField(max_length=70)

        def __unicode__(self):
            return self.tam_adi

    class Makale(models.Model):
        yayin_tarihi = models.DateTimeField()
        baslik = models.CharField(max_length=200)
        icerik = models.TextField()
        yazar = models.ForeignKey(Yazar)

        def __unicode__(self):
            return self.baslik

Kurun
==========

Şimdi, Django komut satırı özelliğini kullanarak veritabanı tablolarını otomatik olarak
yaratın:

.. code-block:: bash

    manage.py syncdb

The :djadmin:`syncdb` komutu tüm mevcut modellerinize bakarak veritabanınız için henüz yaratılmamış
tabloları yaratır. 

Özgür API'nin tadını çıkartın
==============================

Verinize erişmek için zengin, özgür bir :ref:`Python API'sine<topics-db-queries>` sahipsiniz::

    >>> from sitem.models import Yazar, Makale

    # Henüz sistemde hiç yazar yok.
    >>> Yazar.objects.all()
    []
    
    # Yeni bir yazar oluşturun.
    >>> r = Yazar(tam_adi='John Smith')
    
    # Nesneyi veritabanına kaydedin. save() metodunu açıkça çağırmalısınız.
    >>> r.save()

    # artık makalenin bir ID'si var.
    >>> r.id
    1
    
    # Artık yeni yazarımız da veritabanımızda.
    >>> Yazar.objects.all()
    [<Yazar: John Smith>]

    # Sütunlar Python nesnelerinin özellikleri olarak temsil edilir.
    >>> r.tam_adi
    'John Smith'

    # Django zengin bir veritabanı gözatma API'si sunar.
    >>> Yazar.objects.get(id=1)
    <Yazar: John Smith>
    >>> Yazar.objects.get(tam_adi__startswith='John')
    <Yazar: John Smith>
    >>> Yazar.objects.get(tam_adi__contains='mith')
    <Yazar: John Smith>
    >>> Yazar.objects.get(id=2)
    Traceback (most recent call last):
        ...
    DoesNotExist: Yazar matching query does not exist.

    # Makale yaratın.
    >>> from datetime import datetime
    >>> a = Makale(yayin_tarihi=datetime.now(), baslik='Django çok havalı',
    ...     icerik='EVET.', yazar=r)
    >>> a.save()

    # Şimdi yeni makalemiz veritabanımızda.
    >>> Makale.objects.all()
    [<Makale: Django çok havalı>]

    # Makale nesneleri kendilerine bağlanan Yazar nesneleri için API erişimine sahiptir.
    >>> r = a.yazar
    >>> r.tam_adi
    'John Smith'

    # Tersi de doğrudur: Yazar nesneleri bağlı oldukları Makale nesneleri için API erişimine sahiptir.
    >>> r.makale_set.all()
    [<Makale: Django çok havalı>]

    # API veritabanı ilişkilerini ihtiyacınız olduğu kadar size sunar, arka planda
    # verimli JOIN işlemlerini gerçekler.
    # Şimdi adı "John" ile başlayan tüm yazarların tüm makalelerini bulalım
    >>> Makale.objects.filter(yazar__tam_adi__startswith="John")
    [<Makale: Django çok havalı>]

    # Bir nesneyi özelliklerini başkalaştırarak ve save() metodunu çağırarak değiştirebilirsiniz.
    >>> r.tam_adi = 'Billy Goat'
    >>> r.save()

    # delete() ile nesneyi veritabanınızdan silin.
    >>> r.delete()

Dinamik bir yönetim arayüzü: sadece bir temel değil -- tüm ev
============================================================================

Modellerinizi tanımladıktan sonra, Django otomatik olarak profosyonel, kullanıma
hazır bir :ref:`yönetimsel arayüz <ref-contrib-admin>` sunar -- a Web
site that lets authenticated users add, change and delete objects. It's as easy
as registering your model in the admin site::
Once your models are defined, Django can automatically create a professional,
production ready :ref:`administrative interface <ref-contrib-admin>` -- a Web
site that lets authenticated users add, change and delete objects. It's as easy
as registering your model in the admin site::

    # In models.py...

    from django.db import models

    class Article(models.Model):
        pub_date = models.DateTimeField()
        headline = models.CharField(max_length=200)
        content = models.TextField()
        reporter = models.ForeignKey(Reporter)


    # In admin.py in the same directory...

    import models
    from django.contrib import admin

    admin.site.register(models.Article)

The philosophy here is that your site is edited by a staff, or a client, or
maybe just you -- and you don't want to have to deal with creating backend
interfaces just to manage content.

One typical workflow in creating Django apps is to create models and get the
admin sites up and running as fast as possible, so your staff (or clients) can
start populating data. Then, develop the way data is presented to the public.

Design your URLs
================

A clean, elegant URL scheme is an important detail in a high-quality Web
application. Django encourages beautiful URL design and doesn't put any cruft
in URLs, like ``.php`` or ``.asp``.

To design URLs for an app, you create a Python module called a :ref:`URLconf
<topics-http-urls>`. A table of contents for your app, it contains a simple mapping
between URL patterns and Python callback functions. URLconfs also serve to
decouple URLs from Python code.

Here's what a URLconf might look like for the ``Reporter``/``Article``
example above::

    from django.conf.urls.defaults import *

    urlpatterns = patterns('',
        (r'^articles/(\d{4})/$', 'mysite.views.year_archive'),
        (r'^articles/(\d{4})/(\d{2})/$', 'mysite.views.month_archive'),
        (r'^articles/(\d{4})/(\d{2})/(\d+)/$', 'mysite.views.article_detail'),
    )

The code above maps URLs, as simple regular expressions, to the location of
Python callback functions ("views"). The regular expressions use parenthesis to
"capture" values from the URLs. When a user requests a page, Django runs
through each pattern, in order, and stops at the first one that matches the
requested URL. (If none of them matches, Django calls a special-case 404 view.)
This is blazingly fast, because the regular expressions are compiled at load
time.

Once one of the regexes matches, Django imports and calls the given view, which
is a simple Python function. Each view gets passed a request object --
which contains request metadata -- and the values captured in the regex.

For example, if a user requested the URL "/articles/2005/05/39323/", Django
would call the function ``mysite.views.article_detail(request,
'2005', '05', '39323')``.

Write your views
================

Each view is responsible for doing one of two things: Returning an
:class:`~django.http.HttpResponse` object containing the content for the
requested page, or raising an exception such as :class:`~django.http.Http404`.
The rest is up to you.

Generally, a view retrieves data according to the parameters, loads a template
and renders the template with the retrieved data. Here's an example view for
``year_archive`` from above::

    def year_archive(request, year):
        a_list = Article.objects.filter(pub_date__year=year)
        return render_to_response('news/year_archive.html', {'year': year, 'article_list': a_list})

This example uses Django's :ref:`template system <topics-templates>`, which has
several powerful features but strives to stay simple enough for non-programmers
to use.

Design your templates
=====================

The code above loads the ``news/year_archive.html`` template.

Django has a template search path, which allows you to minimize redundancy among
templates. In your Django settings, you specify a list of directories to check
for templates. If a template doesn't exist in the first directory, it checks the
second, and so on.

Let's say the ``news/article_detail.html`` template was found. Here's what that
might look like:

.. code-block:: html+django

    {% extends "base.html" %}

    {% block title %}Articles for {{ year }}{% endblock %}

    {% block content %}
    <h1>Articles for {{ year }}</h1>

    {% for article in article_list %}
        <p>{{ article.headline }}</p>
        <p>By {{ article.reporter.full_name }}</p>
        <p>Published {{ article.pub_date|date:"F j, Y" }}</p>
    {% endfor %}
    {% endblock %}

Variables are surrounded by double-curly braces. ``{{ article.headline }}``
means "Output the value of the article's headline attribute." But dots aren't
used only for attribute lookup: They also can do dictionary-key lookup, index
lookup and function calls.

Note ``{{ article.pub_date|date:"F j, Y" }}`` uses a Unix-style "pipe" (the "|"
character). This is called a template filter, and it's a way to filter the value
of a variable. In this case, the date filter formats a Python datetime object in
the given format (as found in PHP's date function; yes, there is one good idea
in PHP).

You can chain together as many filters as you'd like. You can write custom
filters. You can write custom template tags, which run custom Python code behind
the scenes.

Finally, Django uses the concept of "template inheritance": That's what the
``{% extends "base.html" %}`` does. It means "First load the template called
'base', which has defined a bunch of blocks, and fill the blocks with the
following blocks." In short, that lets you dramatically cut down on redundancy
in templates: each template has to define only what's unique to that template.

Here's what the "base.html" template might look like:

.. code-block:: html+django

    <html>
    <head>
        <title>{% block title %}{% endblock %}</title>
    </head>
    <body>
        <img src="sitelogo.gif" alt="Logo" />
        {% block content %}{% endblock %}
    </body>
    </html>

Simplistically, it defines the look-and-feel of the site (with the site's logo),
and provides "holes" for child templates to fill. This makes a site redesign as
easy as changing a single file -- the base template.

It also lets you create multiple versions of a site, with different base
templates, while reusing child templates. Django's creators have used this
technique to create strikingly different cell-phone editions of sites -- simply
by creating a new base template.

Note that you don't have to use Django's template system if you prefer another
system. While Django's template system is particularly well-integrated with
Django's model layer, nothing forces you to use it. For that matter, you don't
have to use Django's database API, either. You can use another database
abstraction layer, you can read XML files, you can read files off disk, or
anything you want. Each piece of Django -- models, views, templates -- is
decoupled from the next.

This is just the surface
========================

This has been only a quick overview of Django's functionality. Some more useful
features:

    * A :ref:`caching framework <topics-cache>` that integrates with memcached
      or other backends.

    * A :ref:`syndication framework <ref-contrib-syndication>` that makes
      creating RSS and Atom feeds as easy as writing a small Python class.

    * More sexy automatically-generated admin features -- this overview barely
      scratched the surface.

The next obvious steps are for you to `download Django`_, read :ref:`the
tutorial <intro-tutorial01>` and join `the community`_. Thanks for your
interest!

.. _download Django: http://www.djangoproject.com/download/
.. _the community: http://www.djangoproject.com/community/

